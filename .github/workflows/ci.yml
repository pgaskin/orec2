name: CI
on:
  push:
    branches:
      - master
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch:
    inputs:
      zyte:
        required: false
        type: boolean
      keep_facility_list:
        required: false
        type: boolean

permissions:
  contents: write

concurrency:
  group: cache
  cancel-in-progress: false

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: go test -v ./...
  cache:
    needs: [test]
    name: Update cached pages
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'pgaskin' }}
    steps:
      - uses: actions/checkout@v4
        with:
          filter: blob:none
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: git config --global user.name github-actions && git config --global user.email github-actions@github.com
      - run: git worktree add cache cache
      - run: grep -m1 'GET ' cache/page-* | grep -v 'place-listing[^/]' | cut -d':' -f1 | xargs rm
        if: ${{ github.event_name != 'push' }} # we only want to clear the cached data if it's a scheduled or forced update... otherwise, just download anything new if needed
      - run: rm -fv cache/page-*
        if: ${{ github.event_name != 'push' && !(github.event.inputs != null && (github.event.inputs.keep_facility_list == true || github.event.inputs.keep_facility_list == 'true')) }} # we only want to clear the cached data if it's a scheduled or forced update... otherwise, just download anything new if needed
      - run: go run ./scraper -cache-dir ./cache -geocodio ${{ github.event.inputs != null && (github.event.inputs.zyte == true || github.event.inputs.zyte == 'true') && '-zyte' || '' }}
        env:
          ZYTE_APIKEY: ${{ secrets.zyte_apikey }}
          GEOCODIO_APIKEY: ${{ secrets.geocodio_apikey }}
          GEOCODEEARTH_APIKEY: ${{ secrets.geocodeearth_apikey }}
          OTTCA_SCRAPER_SECRET: ${{ secrets.ottca_scraper_secret }}
      - run: |
          git -C cache add . && { git -C cache diff --cached --quiet || git -C cache commit -m "update cache (${{ github.event_name == 'push' && 'partial' || 'full' }} reason: ${{github.event_name}} scraper: $(git rev-parse HEAD))" ; } && git -C cache push
  scrape:
    needs: [test, cache]
    name: Scrape cached pages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          filter: blob:none
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: git config --global user.name github-actions && git config --global user.email github-actions@github.com
      - run: git fetch --refmap='' https://github.com/pgaskin/orec2 cache:refs/upstream/cache
        if: ${{ github.repository_owner != 'pgaskin' }}
      - run: git worktree add cache ${{ github.repository_owner == 'pgaskin' && 'cache' || 'refs/upstream/cache' }}
      - run: git worktree add data data
      - run: git worktree add data-csv data-csv
      - run: rm -fv data/* csv/*
      - run: cp schema/schema.proto data/data.proto
      - run: go run ./scraper -cache-dir ./cache -geocodio -no-fetch -scrape ./data.pb
      - run: go run ./exporter -json ./data/data.json -pb ./data/data.pb -textpb ./data/data.textpb -csv ./data-csv -pretty ./data.pb
      - run: |
          git -C data add . && { git -C data diff --cached --quiet || git -C data commit -m "update data (reason: ${{github.event_name}} scraper: $(git rev-parse HEAD) cache: ${{ github.repository_owner == 'pgaskin' && '' || 'pgaskin/orec2@' }}$(git -C cache rev-parse HEAD))" ; } && git -C data push
      - run: |
          git -C data-csv add . && { git -C data-csv diff --cached --quiet || git -C data-csv commit -m "update data (reason: ${{github.event_name}} scraper: $(git rev-parse HEAD) cache: ${{ github.repository_owner == 'pgaskin' && '' || 'pgaskin/orec2@' }}$(git -C cache rev-parse HEAD))" ; } && git -C data-csv push
